import React from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';

interface ValidationData {
  elevatorPitch: string[];
  competitors: string[];
  majorRisk: string;
  marketSize?: string;
  userPersonas?: string[];
  gtmChannels?: string[];
  nextMilestones?: string[];
  reasoning?: string;
  sources?: string[];
}

interface ValidationResultProps {
  data: ValidationData;
  showReasoning: boolean;
  selectedModel: 'sonar-reasoning' | 'sonar-deep-research';
}

export const ValidationResult = ({ data, showReasoning, selectedModel }: ValidationResultProps) => {
  const exportToPDF = () => {
    const content = generateExportContent();
    
    // Create a blob with the content
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    // Create a temporary link to download
    const link = document.createElement('a');
    link.href = url;
    link.download = 'startup-validation-report.txt';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const copyToClipboard = () => {
    const content = generateExportContent();
    navigator.clipboard.writeText(content);
  };

  const generateExportContent = () => {
    let content = "STARTUP IDEA VALIDATION REPORT\n";
    content += "Generated by Startup Idea Validator\n";
    content += "=".repeat(50) + "\n\n";
    
    content += "ELEVATOR PITCH:\n";
    data.elevatorPitch?.forEach((point, index) => {
      content += `${index + 1}. ${point}\n`;
    });
    
    content += "\nTOP COMPETITORS:\n";
    data.competitors?.forEach((competitor, index) => {
      content += `${index + 1}. ${competitor}\n`;
    });
    
    content += `\nMAJOR RISK:\n${data.majorRisk}\n`;
    
    if (selectedModel === 'sonar-deep-research') {
      if (data.marketSize) content += `\nMARKET SIZE:\n${data.marketSize}\n`;
      
      if (data.userPersonas) {
        content += "\nUSER PERSONAS:\n";
        data.userPersonas.forEach((persona, index) => {
          content += `${index + 1}. ${persona}\n`;
        });
      }
      
      if (data.gtmChannels) {
        content += "\nGO-TO-MARKET CHANNELS:\n";
        data.gtmChannels.forEach((channel, index) => {
          content += `${index + 1}. ${channel}\n`;
        });
      }
      
      if (data.nextMilestones) {
        content += "\nNEXT MILESTONES:\n";
        data.nextMilestones.forEach((milestone, index) => {
          content += `${index + 1}. ${milestone}\n`;
        });
      }
    }
    
    if (showReasoning && data.reasoning) {
      content += `\nAI REASONING:\n${data.reasoning}\n`;
    }
    
    if (data.sources && data.sources.length > 0) {
      content += "\nSOURCES:\n";
      data.sources.forEach((source, index) => {
        content += `[${index + 1}] ${source}\n`;
      });
    }
    
    return content;
  };

  return (
    <div className="mt-6 space-y-4">
      {/* Header */}
      <Card className="p-6 bg-gradient-to-r from-purple-500 to-blue-500 text-white">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-2xl font-bold mb-2">
              {selectedModel === 'sonar-deep-research' ? '🔍 Deep Research Analysis' : '🧠 Quick Reasoning Results'}
            </h3>
            <p className="text-purple-100">
              {selectedModel === 'sonar-deep-research' 
                ? 'Comprehensive analysis with exhaustive research' 
                : 'Fast Chain-of-Thought structured analysis'
              }
            </p>
          </div>
          <div className="flex space-x-2">
            <Button 
              onClick={copyToClipboard}
              variant="outline" 
              size="sm"
              className="text-purple-600 border-white hover:bg-white/10"
            >
              Copy Report
            </Button>
            <Button 
              onClick={exportToPDF}
              size="sm"
              className="bg-white text-purple-600 hover:bg-gray-100"
            >
              Export Report
            </Button>
          </div>
        </div>
      </Card>

      {/* Main Content */}
      <div className="grid gap-4">
        {/* Elevator Pitch */}
        <Card className="p-6 bg-white shadow-lg border-l-4 border-purple-500">
          <h4 className="font-bold text-xl mb-4 text-purple-800 flex items-center">
            🚀 <span className="ml-2">Elevator Pitch</span>
          </h4>
          <div className="space-y-3">
            {data.elevatorPitch?.map((point, index) => (
              <div key={index} className="flex items-start space-x-3 p-3 bg-purple-50 rounded-lg">
                <span className="flex-shrink-0 w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                  {index + 1}
                </span>
                <span className="text-gray-800 font-medium">{point}</span>
              </div>
            ))}
          </div>
        </Card>

        {/* Competitors */}
        <Card className="p-6 bg-white shadow-lg border-l-4 border-blue-500">
          <h4 className="font-bold text-xl mb-4 text-blue-800 flex items-center">
            🏢 <span className="ml-2">Top Competitors</span>
          </h4>
          <div className="space-y-3">
            {data.competitors?.map((competitor, index) => (
              <div key={index} className="flex items-start space-x-3 p-4 bg-blue-50 rounded-lg border border-blue-200">
                <span className="flex-shrink-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold">
                  {index + 1}
                </span>
                <span className="text-gray-800 font-medium">{competitor}</span>
              </div>
            ))}
          </div>
        </Card>

        {/* Major Risk */}
        <Card className="p-6 bg-white shadow-lg border-l-4 border-red-500">
          <h4 className="font-bold text-xl mb-4 text-red-800 flex items-center">
            ⚠️ <span className="ml-2">Major Risk</span>
          </h4>
          <div className="p-4 bg-red-50 rounded-lg border border-red-200">
            <p className="text-gray-800 font-medium leading-relaxed">{data.majorRisk}</p>
          </div>
        </Card>

        {/* Deep Research Content */}
        {selectedModel === 'sonar-deep-research' && (
          <>
            {data.marketSize && (
              <Card className="p-6 bg-white shadow-lg border-l-4 border-green-500">
                <h4 className="font-bold text-xl mb-4 text-green-800 flex items-center">
                  📊 <span className="ml-2">Market Size</span>
                </h4>
                <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                  <p className="text-gray-800 font-medium leading-relaxed">{data.marketSize}</p>
                </div>
              </Card>
            )}

            {data.userPersonas && (
              <Card className="p-6 bg-white shadow-lg border-l-4 border-indigo-500">
                <h4 className="font-bold text-xl mb-4 text-indigo-800 flex items-center">
                  👥 <span className="ml-2">User Personas</span>
                </h4>
                <div className="space-y-3">
                  {data.userPersonas.map((persona, index) => (
                    <div key={index} className="flex items-start space-x-3 p-4 bg-indigo-50 rounded-lg border border-indigo-200">
                      <span className="flex-shrink-0 w-8 h-8 bg-indigo-500 text-white rounded-full flex items-center justify-center font-bold">
                        {index + 1}
                      </span>
                      <span className="text-gray-800 font-medium">{persona}</span>
                    </div>
                  ))}
                </div>
              </Card>
            )}

            {data.gtmChannels && (
              <Card className="p-6 bg-white shadow-lg border-l-4 border-orange-500">
                <h4 className="font-bold text-xl mb-4 text-orange-800 flex items-center">
                  📢 <span className="ml-2">Go-to-Market Channels</span>
                </h4>
                <div className="space-y-3">
                  {data.gtmChannels.map((channel, index) => (
                    <div key={index} className="flex items-start space-x-3 p-4 bg-orange-50 rounded-lg border border-orange-200">
                      <span className="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center font-bold">
                        {index + 1}
                      </span>
                      <span className="text-gray-800 font-medium">{channel}</span>
                    </div>
                  ))}
                </div>
              </Card>
            )}

            {data.nextMilestones && (
              <Card className="p-6 bg-white shadow-lg border-l-4 border-teal-500">
                <h4 className="font-bold text-xl mb-4 text-teal-800 flex items-center">
                  🎯 <span className="ml-2">Next Milestones</span>
                </h4>
                <div className="space-y-3">
                  {data.nextMilestones.map((milestone, index) => (
                    <div key={index} className="flex items-start space-x-3 p-4 bg-teal-50 rounded-lg border border-teal-200">
                      <span className="flex-shrink-0 w-8 h-8 bg-teal-500 text-white rounded-full flex items-center justify-center font-bold">
                        {index + 1}
                      </span>
                      <span className="text-gray-800 font-medium">{milestone}</span>
                    </div>
                  ))}
                </div>
              </Card>
            )}
          </>
        )}

        {/* AI Reasoning */}
        {showReasoning && data.reasoning && (
          <Card className="p-6 bg-white shadow-lg border-l-4 border-gray-500">
            <h4 className="font-bold text-xl mb-4 text-gray-800 flex items-center">
              🧠 <span className="ml-2">AI Reasoning Process</span>
            </h4>
            <div className="bg-gradient-to-r from-gray-50 to-blue-50 p-5 rounded-lg border border-gray-200">
              <div className="flex items-start space-x-3 mb-3">
                <div className="flex-shrink-0 w-8 h-8 bg-gray-600 text-white rounded-full flex items-center justify-center">
                  <span className="text-sm">🤔</span>
                </div>
                <div className="flex-1">
                  <h5 className="font-semibold text-gray-800 mb-2">How I analyzed your startup idea:</h5>
                  <div className="prose prose-sm max-w-none">
                    <p className="text-gray-700 leading-relaxed whitespace-pre-line">{data.reasoning}</p>
                  </div>
                </div>
              </div>
              <div className="mt-4 pt-3 border-t border-gray-200">
                <p className="text-xs text-gray-500 italic">
                  This reasoning process shows the AI's step-by-step analysis to provide transparent and explainable insights.
                </p>
              </div>
            </div>
          </Card>
        )}

        {/* Sources */}
        {data.sources && data.sources.length > 0 && (
          <Card className="p-6 bg-white shadow-lg border-l-4 border-emerald-500">
            <h4 className="font-bold text-xl mb-4 text-emerald-800 flex items-center">
              📚 <span className="ml-2">Research Sources</span>
            </h4>
            <div className="bg-emerald-50 p-4 rounded-lg border border-emerald-200">
              <p className="text-sm text-emerald-700 mb-4 font-medium">
                The analysis above is based on research from the following sources:
              </p>
              <div className="space-y-3">
                {data.sources.map((source, index) => (
                  <div key={index} className="flex items-start space-x-3 p-3 bg-white rounded-lg border border-emerald-200">
                    <span className="flex-shrink-0 w-6 h-6 bg-emerald-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                      {index + 1}
                    </span>
                    <div className="flex-1">
                      {(() => {
                        // Extract URL from source string
                        const urlMatch = source.match(/(https?:\/\/[^\s]+)/);
                        const url = urlMatch ? urlMatch[1] : null;
                        
                        if (url) {
                          // Extract the title (everything before the URL)
                          const title = source.replace(/(https?:\/\/[^\s]+)/g, '').replace(/:\s*$/, '').trim();
                          const displayTitle = title || url;
                          
                          return (
                            <a 
                              href={url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-emerald-700 hover:text-emerald-900 underline font-medium"
                            >
                              {displayTitle}
                            </a>
                          );
                        } else {
                          return <span className="text-gray-800 font-medium">{source}</span>;
                        }
                      })()}
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 pt-3 border-t border-emerald-200">
                <p className="text-xs text-emerald-600 italic">
                  Sources are automatically gathered from real-time web research to ensure current and accurate information.
                </p>
              </div>
            </div>
          </Card>
        )}
      </div>
    </div>
  );
};
