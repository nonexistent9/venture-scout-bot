import React from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import jsPDF from 'jspdf';

interface ValidationData {
  elevatorPitch: string[];
  competitors: string[];
  majorRisk: string;
  marketSize?: string;
  userPersonas?: string[];
  gtmChannels?: string[];
  nextMilestones?: string[];
  reasoning?: string;
  sources?: string[];
}

interface ValidationResultProps {
  data: ValidationData;
  showReasoning: boolean;
  selectedModel: 'sonar-reasoning' | 'sonar-deep-research';
}

export const ValidationResult = ({ data, showReasoning, selectedModel }: ValidationResultProps) => {
  const exportToPDF = () => {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const maxWidth = pageWidth - 2 * margin;
    let yPosition = 30;

    // Helper function to add text with word wrapping
    const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
      pdf.setFontSize(fontSize);
      if (isBold) {
        pdf.setFont(undefined, 'bold');
      } else {
        pdf.setFont(undefined, 'normal');
      }
      
      const lines = pdf.splitTextToSize(text, maxWidth);
      
      // Check if we need a new page
      if (yPosition + (lines.length * fontSize * 0.5) > pageHeight - 40) {
        addFooter();
        pdf.addPage();
        yPosition = 30;
      }
      
      pdf.text(lines, margin, yPosition);
      yPosition += lines.length * fontSize * 0.5 + 5;
    };

    // Helper function to add section spacing
    const addSectionSpacing = () => {
      yPosition += 8;
    };

    // Helper function to add footer
    const addFooter = () => {
      const currentDate = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      pdf.setFontSize(8);
      pdf.setFont(undefined, 'normal');
      pdf.setTextColor(128, 128, 128);
      pdf.text(`Generated on ${currentDate} by Venture Scout Bot`, margin, pageHeight - 10);
      pdf.setTextColor(0, 0, 0); // Reset to black
    };

    // Title
    addText('STARTUP IDEA VALIDATION REPORT', 20, true);
    addText('Generated by Venture Scout Bot', 12);
    addSectionSpacing();

    // Elevator Pitch
    addText('ELEVATOR PITCH', 16, true);
    data.elevatorPitch?.forEach((point, index) => {
      addText(`${index + 1}. ${point}`, 11);
    });
    addSectionSpacing();

    // Competitors
    addText('TOP COMPETITORS', 16, true);
    data.competitors?.forEach((competitor, index) => {
      addText(`${index + 1}. ${competitor}`, 11);
    });
    addSectionSpacing();

    // Major Risk
    addText('MAJOR RISK', 16, true);
    addText(data.majorRisk, 11);
    addSectionSpacing();

    // Deep Research Content (if available)
    if (selectedModel === 'sonar-deep-research') {
      if (data.marketSize) {
        addText('MARKET SIZE', 16, true);
        addText(data.marketSize, 11);
        addSectionSpacing();
      }
      
      if (data.userPersonas && data.userPersonas.length > 0) {
        addText('USER PERSONAS', 16, true);
        data.userPersonas.forEach((persona, index) => {
          addText(`${index + 1}. ${persona}`, 11);
        });
        addSectionSpacing();
      }
      
      if (data.gtmChannels && data.gtmChannels.length > 0) {
        addText('GO-TO-MARKET CHANNELS', 16, true);
        data.gtmChannels.forEach((channel, index) => {
          addText(`${index + 1}. ${channel}`, 11);
        });
        addSectionSpacing();
      }
      
      if (data.nextMilestones && data.nextMilestones.length > 0) {
        addText('NEXT MILESTONES', 16, true);
        data.nextMilestones.forEach((milestone, index) => {
          addText(`${index + 1}. ${milestone}`, 11);
        });
        addSectionSpacing();
      }
    }

    // AI Reasoning (if shown)
    if (showReasoning && data.reasoning) {
      addText('AI REASONING', 16, true);
      addText(data.reasoning, 10);
      addSectionSpacing();
    }

    // Sources (if available)
    if (data.sources && data.sources.length > 0) {
      addText('SOURCES', 16, true);
      data.sources.forEach((source, index) => {
        addText(`[${index + 1}] ${source}`, 9);
      });
    }

    // Add footer to the last page
    addFooter();

    // Save the PDF
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    pdf.save(`startup-validation-report-${timestamp}.pdf`);
  };

  const copyToClipboard = () => {
    const content = generateExportContent();
    navigator.clipboard.writeText(content);
  };

  const generateExportContent = () => {
    let content = "STARTUP IDEA VALIDATION REPORT\n";
    content += "Generated by Startup Idea Validator\n";
    content += "=".repeat(50) + "\n\n";
    
    content += "ELEVATOR PITCH:\n";
    data.elevatorPitch?.forEach((point, index) => {
      content += `${index + 1}. ${point}\n`;
    });
    
    content += "\nTOP COMPETITORS:\n";
    data.competitors?.forEach((competitor, index) => {
      content += `${index + 1}. ${competitor}\n`;
    });
    
    content += `\nMAJOR RISK:\n${data.majorRisk}\n`;
    
    if (selectedModel === 'sonar-deep-research') {
      if (data.marketSize) content += `\nMARKET SIZE:\n${data.marketSize}\n`;
      
      if (data.userPersonas) {
        content += "\nUSER PERSONAS:\n";
        data.userPersonas.forEach((persona, index) => {
          content += `${index + 1}. ${persona}\n`;
        });
      }
      
      if (data.gtmChannels) {
        content += "\nGO-TO-MARKET CHANNELS:\n";
        data.gtmChannels.forEach((channel, index) => {
          content += `${index + 1}. ${channel}\n`;
        });
      }
      
      if (data.nextMilestones) {
        content += "\nNEXT MILESTONES:\n";
        data.nextMilestones.forEach((milestone, index) => {
          content += `${index + 1}. ${milestone}\n`;
        });
      }
    }
    
    if (showReasoning && data.reasoning) {
      content += `\nAI REASONING:\n${data.reasoning}\n`;
    }
    
    if (data.sources && data.sources.length > 0) {
      content += "\nSOURCES:\n";
      data.sources.forEach((source, index) => {
        content += `[${index + 1}] ${source}\n`;
      });
    }
    
    return content;
  };

  return (
    <div className="mt-8 space-y-6">
      {/* Header */}
      <Card className="p-8 bg-gray-900 text-white border-0">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-2xl font-semibold mb-3">
              {selectedModel === 'sonar-deep-research' ? '🔍 Deep Research Analysis' : '🧠 Quick Reasoning Results'}
            </h3>
            <p className="text-gray-300">
              {selectedModel === 'sonar-deep-research' 
                ? 'Comprehensive analysis with exhaustive research' 
                : 'Fast Chain-of-Thought structured analysis'
              }
            </p>
          </div>
          <div className="flex space-x-3">
            <Button 
              onClick={copyToClipboard}
              variant="outline" 
              size="sm"
              className="text-black border-gray-600 hover:bg-gray-100 bg-white"
            >
              Copy Report
            </Button>
            <Button 
              onClick={exportToPDF}
              size="sm"
              className="bg-white text-gray-900 hover:bg-gray-100"
            >
              📄 Export PDF
            </Button>
          </div>
        </div>
      </Card>

      {/* Main Content */}
      <div className="grid gap-6">
        {/* Elevator Pitch */}
        <Card className="p-8 bg-white border border-gray-100 shadow-sm">
          <h4 className="font-semibold text-xl mb-6 text-gray-900 flex items-center">
            <span className="text-2xl mr-3">🚀</span>Elevator Pitch
          </h4>
          <div className="space-y-4">
            {data.elevatorPitch?.map((point, index) => (
              <div key={index} className="flex items-start space-x-4 p-4 bg-gray-50 rounded-xl border border-gray-100">
                <span className="flex-shrink-0 w-7 h-7 bg-gray-900 text-white rounded-full flex items-center justify-center text-sm font-medium">
                  {index + 1}
                </span>
                <span className="text-gray-800 font-medium leading-relaxed">{point}</span>
              </div>
            ))}
          </div>
        </Card>

        {/* Competitors */}
        <Card className="p-8 bg-white border border-gray-100 shadow-sm">
          <h4 className="font-semibold text-xl mb-6 text-gray-900 flex items-center">
            <span className="text-2xl mr-3">🏢</span>Top Competitors
          </h4>
          <div className="space-y-4">
            {data.competitors?.map((competitor, index) => (
              <div key={index} className="flex items-start space-x-4 p-5 bg-gray-50 rounded-xl border border-gray-100">
                <span className="flex-shrink-0 w-8 h-8 bg-gray-900 text-white rounded-full flex items-center justify-center font-medium">
                  {index + 1}
                </span>
                <span className="text-gray-800 font-medium leading-relaxed">{competitor}</span>
              </div>
            ))}
          </div>
        </Card>

        {/* Major Risk */}
        <Card className="p-8 bg-white border border-gray-100 shadow-sm">
          <h4 className="font-semibold text-xl mb-6 text-gray-900 flex items-center">
            <span className="text-2xl mr-3">⚠️</span>Major Risk
          </h4>
          <div className="p-5 bg-gray-50 rounded-xl border border-gray-100">
            <p className="text-gray-800 font-medium leading-relaxed">{data.majorRisk}</p>
          </div>
        </Card>

        {/* Deep Research Content */}
        {selectedModel === 'sonar-deep-research' && (
          <>
            {data.marketSize && (
              <Card className="p-8 bg-white border border-gray-100 shadow-sm">
                <h4 className="font-semibold text-xl mb-6 text-gray-900 flex items-center">
                  <span className="text-2xl mr-3">📊</span>Market Size
                </h4>
                <div className="p-5 bg-gray-50 rounded-xl border border-gray-100">
                  <p className="text-gray-800 font-medium leading-relaxed">{data.marketSize}</p>
                </div>
              </Card>
            )}

            {data.userPersonas && (
              <Card className="p-8 bg-white border border-gray-100 shadow-sm">
                <h4 className="font-semibold text-xl mb-6 text-gray-900 flex items-center">
                  <span className="text-2xl mr-3">👥</span>User Personas
                </h4>
                <div className="space-y-4">
                  {data.userPersonas.map((persona, index) => (
                    <div key={index} className="flex items-start space-x-4 p-5 bg-gray-50 rounded-xl border border-gray-100">
                      <span className="flex-shrink-0 w-8 h-8 bg-gray-900 text-white rounded-full flex items-center justify-center font-medium">
                        {index + 1}
                      </span>
                      <span className="text-gray-800 font-medium leading-relaxed">{persona}</span>
                    </div>
                  ))}
                </div>
              </Card>
            )}

            {data.gtmChannels && (
              <Card className="p-8 bg-white border border-gray-100 shadow-sm">
                <h4 className="font-semibold text-xl mb-6 text-gray-900 flex items-center">
                  <span className="text-2xl mr-3">📢</span>Go-to-Market Channels
                </h4>
                <div className="space-y-4">
                  {data.gtmChannels.map((channel, index) => (
                    <div key={index} className="flex items-start space-x-4 p-5 bg-gray-50 rounded-xl border border-gray-100">
                      <span className="flex-shrink-0 w-8 h-8 bg-gray-900 text-white rounded-full flex items-center justify-center font-medium">
                        {index + 1}
                      </span>
                      <span className="text-gray-800 font-medium leading-relaxed">{channel}</span>
                    </div>
                  ))}
                </div>
              </Card>
            )}

            {data.nextMilestones && (
              <Card className="p-8 bg-white border border-gray-100 shadow-sm">
                <h4 className="font-semibold text-xl mb-6 text-gray-900 flex items-center">
                  <span className="text-2xl mr-3">🎯</span>Next Milestones
                </h4>
                <div className="space-y-4">
                  {data.nextMilestones.map((milestone, index) => (
                    <div key={index} className="flex items-start space-x-4 p-5 bg-gray-50 rounded-xl border border-gray-100">
                      <span className="flex-shrink-0 w-8 h-8 bg-gray-900 text-white rounded-full flex items-center justify-center font-medium">
                        {index + 1}
                      </span>
                      <span className="text-gray-800 font-medium leading-relaxed">{milestone}</span>
                    </div>
                  ))}
                </div>
              </Card>
            )}
          </>
        )}

        {/* AI Reasoning */}
        {showReasoning && data.reasoning && (
          <Card className="p-8 bg-white border border-gray-100 shadow-sm">
            <h4 className="font-semibold text-xl mb-6 text-gray-900 flex items-center">
              <span className="text-2xl mr-3">🧠</span>AI Reasoning Process
            </h4>
            <div className="bg-gray-50 p-6 rounded-xl border border-gray-100">
              <div className="flex items-start space-x-4 mb-4">
                <div className="flex-shrink-0 w-10 h-10 bg-gray-900 text-white rounded-full flex items-center justify-center">
                  <span className="text-lg">🤔</span>
                </div>
                <div className="flex-1">
                  <h5 className="font-medium text-gray-900 mb-3">How I analyzed your startup idea:</h5>
                  <div className="prose prose-sm max-w-none">
                    <p className="text-gray-700 leading-relaxed whitespace-pre-line">{data.reasoning}</p>
                  </div>
                </div>
              </div>
              <div className="mt-6 pt-4 border-t border-gray-200">
                <p className="text-sm text-gray-500">
                  This reasoning process shows the AI's step-by-step analysis to provide transparent and explainable insights.
                </p>
              </div>
            </div>
          </Card>
        )}

        {/* Sources */}
        {data.sources && data.sources.length > 0 && (
          <Card className="p-8 bg-white border border-gray-100 shadow-sm">
            <h4 className="font-semibold text-xl mb-6 text-gray-900 flex items-center">
              <span className="text-2xl mr-3">📚</span>Research Sources
            </h4>
            <div className="bg-gray-50 p-6 rounded-xl border border-gray-100">
              <p className="text-sm text-gray-600 mb-6 font-medium">
                The analysis above is based on research from the following sources:
              </p>
              <div className="space-y-4">
                {data.sources.map((source, index) => (
                  <div key={index} className="flex items-start space-x-4 p-4 bg-white rounded-xl border border-gray-100">
                    <span className="flex-shrink-0 w-7 h-7 bg-gray-900 text-white rounded-full flex items-center justify-center text-sm font-medium">
                      {index + 1}
                    </span>
                    <div className="flex-1">
                      {(() => {
                        // Extract URL from source string
                        const urlMatch = source.match(/(https?:\/\/[^\s]+)/);
                        const url = urlMatch ? urlMatch[1] : null;
                        
                        if (url) {
                          // Extract the title (everything before the URL)
                          const title = source.replace(/(https?:\/\/[^\s]+)/g, '').replace(/:\s*$/, '').trim();
                          const displayTitle = title || url;
                          
                          return (
                            <a 
                              href={url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-gray-900 hover:text-gray-700 underline font-medium"
                            >
                              {displayTitle}
                            </a>
                          );
                        } else {
                          return <span className="text-gray-800 font-medium">{source}</span>;
                        }
                      })()}
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-6 pt-4 border-t border-gray-200">
                <p className="text-sm text-gray-500">
                  Sources are automatically gathered from real-time web research to ensure current and accurate information.
                </p>
              </div>
            </div>
          </Card>
        )}
      </div>
    </div>
  );
};
